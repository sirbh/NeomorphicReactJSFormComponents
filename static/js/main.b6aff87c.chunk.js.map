{"version":3,"sources":["Components/Input/Input.module.css","Components/Radio/Radio.module.css","Components/Toggel/Toggle.module.css","Components/Button/Button.module.css","Components/TextArea/TextArea.module.css","Components/Button/CheckButton.module.css","Components/Input/Input.js","Components/Radio/Radio.js","Components/Toggel/Toggel.js","Components/Button/Button.js","Components/TextArea/TextArea.js","Components/Button/CheckButton.js","Components/FormElement.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","input","props","className","cssClasses","Label","htmlFor","Input","id","name","placeholder","type","radio","Radio","toggle","Toggle","button","Button","value","TextArea","rows","cols","checkButton","CheckButton","formElement","App","FormElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,MAAQ,uB,kBCA1BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,YAAc,mC,+KCWjBC,EAVD,SAACC,GAEX,OACQ,kBAAC,WAAD,KACI,2BAAOC,UAAWC,IAAWC,MAAOC,QAAQ,SAC5C,2BAAOH,UAAWC,IAAWG,MAAOC,GAAG,OAAOC,KAAK,OAAOC,YAAY,cAAcC,KAAK,W,gBCO1FC,EAZD,WAEV,OACI,kBAAC,WAAD,KACI,2BAAOT,UAAWC,IAAWS,MAAOF,KAAK,QAAQF,KAAM,W,gBCGpDK,EAPA,WAEX,OACQ,2BAAOX,UAAWC,IAAWW,OAAQJ,KAAK,c,gBCMvCK,EAPA,WAEX,OACO,2BAAOb,UAAWC,IAAWa,OAAQN,KAAK,SAASO,MAAM,Y,gBCGrDjB,EARD,SAACC,GAEX,OACI,8BAAUC,UAAWC,IAAWe,SAAUC,KAAK,IAAIC,KAAK,Q,gBCMjDC,EAPK,WAEhB,OACO,2BAAOnB,UAAWC,IAAWmB,YAAaZ,KAAK,cC2B3Ca,EA1BK,SAACtB,GACnB,OAAQA,EAAMS,MACZ,IAAK,QACH,OAAO,kBAACJ,EAAD,MAET,IAAK,cACH,OAAO,kBAACgB,EAAD,MAET,IAAK,WACH,OAAO,kBAACJ,EAAD,MAET,IAAK,QACH,OAAO,kBAACN,EAAD,MAET,IAAK,SACH,OAAO,kBAAC,EAAD,MAET,IAAK,SACH,OAAO,kBAACI,EAAD,MAET,QACE,MAAO,KCJEQ,MAtBf,WACE,OACE,yBAAKtB,UAAU,QACb,yBAAKA,UAAU,YACZ,kBAACuB,EAAD,CAAaf,KAAK,UAClB,kBAACe,EAAD,CAAaf,KAAK,UAClB,kBAACe,EAAD,CAAaf,KAAK,WAClB,yBAAKR,UAAU,YACZ,kBAACuB,EAAD,CAAaf,KAAK,aAClB,kBAACe,EAAD,CAAaf,KAAK,YAErB,kBAACe,EAAD,CAAaf,KAAK,UAClB,kBAACe,EAAD,CAAaf,KAAK,UAClB,yBAAKR,UAAU,YACZ,kBAACuB,EAAD,CAAaf,KAAK,gBAClB,kBAACe,EAAD,CAAaf,KAAK,oBCNVgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b6aff87c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__C4yjy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Radio\":\"Radio_Radio__1KyPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toggle\":\"Toggle_Toggle__1iQPK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__pPcyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextArea\":\"TextArea_TextArea__VjD_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckButton\":\"CheckButton_CheckButton__3bwoG\"};","import React,{Fragment} from \"react\"\r\nimport cssClasses from \"./Input.module.css\"\r\nconst input = (props)=>\r\n{\r\n    return (\r\n            <Fragment>\r\n                <label className={cssClasses.Label} htmlFor=\"name\"></label>\r\n                <input className={cssClasses.Input} id=\"name\" name=\"name\" placeholder='Placeholder' type=\"text\"></input>\r\n            </Fragment>\r\n        );\r\n}\r\n\r\nexport default input","import React,{Fragment} from \"react\"\r\nimport cssClasses from \"./Radio.module.css\"\r\nconst radio = ()=>\r\n{\r\n    return ( \r\n        <Fragment>\r\n            <input className={cssClasses.Radio} type=\"radio\" name =\"user\"></input>\r\n        </Fragment>\r\n\r\n\r\n       \r\n    )\r\n}\r\n\r\nexport default radio","import React from \"react\"\r\nimport cssClasses from \"./Toggle.module.css\"\r\nconst toggle = ()=>\r\n{\r\n    return (\r\n            <input className={cssClasses.Toggle} type=\"checkbox\"></input>\r\n    )\r\n}\r\n\r\nexport default toggle","import React from \"react\"\r\nimport cssClasses from \"./Button.module.css\"\r\n\r\n\r\nconst button = ()=>\r\n{\r\n    return (\r\n           <input className={cssClasses.Button} type=\"button\" value=\"SUBMIT\"></input>\r\n    );\r\n}\r\n\r\nexport default button","import React from \"react\"\r\nimport cssClasses from \"./TextArea.module.css\"\r\nconst input = (props)=>\r\n{\r\n    return (\r\n        <textarea className={cssClasses.TextArea} rows=\"4\" cols=\"20\">\r\n        </textarea>\r\n        );\r\n}\r\n\r\nexport default input","import React from \"react\"\r\nimport cssClasses from \"./CheckButton.module.css\"\r\n\r\n\r\nconst checkButton = ()=>\r\n{\r\n    return (\r\n           <input className={cssClasses.CheckButton} type=\"checkbox\"></input>\r\n    );\r\n}\r\n\r\nexport default checkButton","import React from \"react\";\r\nimport Input from \"../Components/Input/Input\";\r\nimport Radio from '../Components/Radio/Radio'\r\nimport Toggle from '../Components/Toggel/Toggel'\r\nimport Button from './Button/Button'\r\nimport TextArea from './TextArea/TextArea'\r\nimport CheckButton from './Button/CheckButton'\r\n\r\nconst formElement = (props) => {\r\n  switch (props.type) {\r\n    case \"Input\": {\r\n      return <Input></Input>;\r\n    }\r\n    case \"CheckButton\": {\r\n      return <CheckButton></CheckButton>;\r\n    }\r\n    case \"TextArea\": {\r\n      return <TextArea></TextArea>;\r\n    }\r\n    case \"Radio\": {\r\n      return <Radio></Radio>;\r\n    }\r\n    case \"Toggle\": {\r\n      return <Toggle></Toggle>;\r\n    }\r\n    case \"Button\": {\r\n      return <Button></Button>;\r\n    }\r\n    default: {\r\n      return \"\";\r\n    }\r\n  }\r\n};\r\n\r\nexport default formElement;\r\n","import React from 'react';\nimport './App.css';\nimport FormElement from '../src/Components/FormElement'\nfunction App() {\n  return (\n    <div className=\"Form\">\n      <div className='FormData'>\n         <FormElement type=\"Input\"></FormElement>\n         <FormElement type=\"Input\"></FormElement>\n         <FormElement type=\"Button\"></FormElement>\n         <div className='TextArea'>\n            <FormElement type=\"TextArea\"></FormElement>\n            <FormElement type=\"Toggle\"></FormElement>\n         </div>\n         <FormElement type=\"Radio\"></FormElement>\n         <FormElement type=\"Radio\"></FormElement>\n         <div className='TextArea'>\n            <FormElement type=\"CheckButton\"></FormElement>\n            <FormElement type=\"CheckButton\"></FormElement>\n         </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}